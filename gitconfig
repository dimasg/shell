[user]
	name = 
	email = 

[core]
# linux
#	autocrlf = input
#	safecrlf = false
# windows
#	autocrlf = true
#	safecrlf = false
	symlinks = false
	quotepath = false
	repositoryformatversion = 0
	filemode = false
	bare = false
	logallrefupdates = true
	symlinks = false
	ignorecase = true
	quotepath = false
	pager = less -F -X

[push]
	default = current

[pull]
	ff = only

[i18n]
	commitencoding = utf-8
	logoutputencoding = cp866

[color]
	ui = auto
	status = always

[merge]
	tool = vimdiff

[alias]
	st = status
	stn = status -uno
	ci = commit
	ca = commit --amend
	co = checkout
	chp = cherry-pick

	d = diff -C
	ds = diff -C --stat
	dsp = diff -C --stat -p
	dw = diff -C --color-words
	dp = diff --patch -U --no-prefix

	l = log -C --decorate
	ls = log -C --stat --decorate
	lsp = log -C --stat -p --decorate
	lg = log --graph '--pretty=tformat:%Cblue%h%Creset %Cgreen%ar%Creset %Cblue%d%Creset %s'
	lga = log --graph '--pretty=tformat:%Cblue%h%Creset %Cgreen%ar%Creset %Cblue%d%Creset %s' --all
	l19 = log --graph '--pretty=tformat:%Cblue%h%Creset %Cgreen%ar%Creset %Cblue%d%Creset %s' --all -19

	lg1 = log --graph --abbrev-commit --decorate --date=relative --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all
	lg2 = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)' --all
	lg3 = !"git lg1"
	grog = log --graph --abbrev-commit --decorate --all --format=format:\"%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(dim white) - %an%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n %C(white)%s%C(reset)\"

# для сложных ветвлений
	lsd = log --graph '--pretty=tformat:%Cblue%h%Creset %Cgreen%ar%Creset %Cblue%d%Creset %s' --all --simplify-by-decoration
	ru = remote update
	sb = show-branch --sha1-name
	sp = show --pretty="format:" --name-only
	ls-del = ls-files -d
	ls-mod = ls-files -m # включая удалённые файлы
	ls-new = ls-files --exclude-standard -o
	ls-ign = ls-files --exclude-standard -o -i
	ka = !gitk --all
	kdo = !gitk --date-order
	kado = !gitk --all --date-order
	kasd = !gitk --all --simplify-by-decoration

	pr = pull --rebase
	prs = pull --recurse-submodules
	prsu = !(git pull --rebase && git submodule update)
	prrs = pull --rebase --recurse-submodules
	ri = rebase -i
	ri2 = rebase -i HEAD~2
	ri3 = rebase -i HEAD~3
	ri4 = rebase -i HEAD~4
	ri5 = rebase -i HEAD~5
	ri6 = rebase -i HEAD~6
	ri7 = rebase -i HEAD~7
	ri8 = rebase -i HEAD~8
	ri9 = rebase -i HEAD~9
	ri10 = rebase -i HEAD~10
	ru = remote update

	sc = svn dcommit
	sf = show --pretty="format:" --name-only 
	sr = svn rebase
	ss = submodule status
	su = submodule update
	sup = !(git stash && git svn rebase >&2) | grep -v \"No local changes to save\" && git stash pop
	up = !(git add . && git stash && git pull --rebase >&2) | grep -v \"No local changes to save\" && git stash pop

	# stash options
	stsh = stash --keep-index
	staash = stash --include-untracked
	staaash = stash --all

	# for atlassian pull requests, for example: git prstash origin 1 pulls
	# where 1 - origin repo url, 2 - number of PR and 3 - PR branch
	prstash = "!f() { git fetch $1 refs/pull-requests/$2/from:$3; } ; f"
	prrs2 = pull --rebase --recurse-submodules

# vim: ts=4 sw=4 ft=gitconfig noet
